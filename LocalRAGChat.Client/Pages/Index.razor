@page "/"
@using LocalRAGChat.Shared
@using System.Net.Http
@inject IHttpClientFactory HttpClientFactory
@inject IJSRuntime JSRuntime

<PageTitle>Local RAG Chat</PageTitle>
@if (_isLoadingInitialData)
{
    <div class="flex items-center justify-center h-screen bg-gray-900 text-white">
        <div class="text-center">
            <div class="inline-block h-10 w-10 animate-spin rounded-full border-4 border-solid border-current border-r-transparent align-[-0.125em] text-blue-500 motion-reduce:animate-[spin_1.5s_linear_infinite]" role="status">
                <span class="!absolute !-m-px !h-px !w-px !overflow-hidden !whitespace-nowrap !border-0 !p-0 ![clip:rect(0,0,0,0)]">Loading...</span>
            </div>
            <p class="mt-4 text-lg text-gray-300">Loading documents and models...</p>
        </div>
    </div>
}
else if (!string.IsNullOrEmpty(_initialDataError))
{
    <div class="flex items-center justify-center h-screen bg-gray-900 text-white">
        <div class="text-center p-8 bg-gray-800 rounded-lg shadow-lg max-w-md">
            <h3 class="text-2xl font-bold text-red-500">Initialization Failed</h3>
            <p class="mt-2 text-gray-300">@_initialDataError</p>
            <button @onclick="LoadInitialDataAsync" class="mt-6 bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded transition-colors">
                Try Again
            </button>
        </div>
    </div>
}
else
{
    <div class="flex flex-col h-screen bg-gray-900 text-white font-sans">
    
        <!-- Header -->
        <header class="flex-shrink-0 bg-gray-800 border-b border-gray-700 p-4">
            <h1 class="text-xl font-bold">Local RAG (Retrieval-Augmented Generation) Chat</h1>
        </header>
    
        <div class="flex flex-1 min-h-0">
            <!-- Sidebar -->
            <div class="w-1/3 bg-gray-800 p-4 flex flex-col border-r border-gray-700">
                <h2 class="text-lg font-semibold mb-2 flex-shrink-0">Controls</h2>
                <!-- File Upload Section -->
                <div class="mb-4 flex-shrink-0">
                    <label class="block mb-2 text-sm font-medium text-gray-300">Upload PDF or TXT</label>
                    <label for="file_input" class="block w-full text-sm text-gray-400 border border-gray-600 rounded-lg cursor-pointer bg-gray-700 hover:bg-gray-600 focus-within:outline-none focus-within:ring-2 focus-within:ring-blue-500 p-3 text-center transition-colors">
                        <span>Click to select file for upload</span>
                        <InputFile id="file_input" OnChange="HandleFileSelected" class="hidden" />
                    </label>
                    @if (!string.IsNullOrEmpty(statusMessage))
                    {
                        <p class="mt-2 text-sm @(isError ? "text-red-400" : "text-green-400")">@statusMessage</p>
                    }
                </div>
                <!-- Document List Section (This part scrolls) -->
                <div class="flex-1 overflow-y-auto min-h-0 pr-2">
                    <h3 class="text-md font-semibold mb-2">Available Documents</h3>
                    @if (documents.Any())
                    {
                        <ul class="space-y-2">
                            @foreach(var doc in documents)
                            {
                                <li style="display: flex; align-items: center; background-color: @(selectedDocument?.Id == doc.Id ? "#2563EB" : "#374151"); border-radius: 0.5rem; margin-bottom: 0.5rem;">
        
                                    <div @onclick="() => SelectDocument(doc)" style="flex-grow: 1; cursor: pointer; padding: 0.75rem;">
                                        <p style="font-weight: 500; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">@doc.FileName</p>
                                        <p style="font-size: 0.75rem; color: #9CA3AF;">@doc.UploadedAt.ToLocalTime().ToString("g")</p>
                                    </div>
        
                                    <button @onclick="() => DeleteDocument(doc)" 
                                            style="flex-shrink: 0; padding: 0.5rem; margin-right: 0.5rem; color: #9CA3AF; border: none; background: none; cursor: pointer;">
                                        <svg xmlns="http://www.w3.org/2000/svg" style="height: 1.25rem; width: 1.25rem;" viewBox="0 0 20 20" fill="currentColor">
                                            <path fill-rule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm4 0a1 1 0 012 0v6a1 1 0 11-2 0V8z" clip-rule="evenodd" />
                                        </svg>
                                    </button>
                                </li>
                            }
                        </ul>
                    } else {
                        <p class="text-gray-400">No documents found.</p>
                    }
                </div>
    
                <!-- Model Selection -->
                <div class="mt-4 flex-shrink-0">
                    <label for="models" class="block mb-2 text-sm font-medium text-gray-300">Chat Model</label>
                    <select @bind="selectedModel" id="models" class="bg-gray-700 border border-gray-600 text-white text-sm rounded-lg block w-full p-2.5">
                        @foreach (var model in availableModels) { <option value="@model">@model</option> }
                    </select>
                </div>
            </div>
    
            <!-- Main Chat Area -->
            <main class="w-2/3 flex flex-col">
                <!-- Chat Messages (This part scrolls) -->
                <div id="chat-container" class="flex-1 p-6 overflow-y-auto min-h-0">
                    @if (selectedDocument == null)
                    {
                        <div class="flex items-center justify-center h-full">
                            <p class="text-gray-400 text-lg">Select a document to begin chatting.</p>
                        </div>
                    }
                    else
                    {
                        @foreach (var message in chatHistory)
                        {
                            <div class="mb-4 @(message.Sender == "AI" ? "text-left" : "text-right")">
                                <div class="inline-block p-3 rounded-lg @(message.Sender == "AI" ? "bg-gray-700" : "bg-blue-600") max-w-2xl">
                                    <p class="text-sm whitespace-pre-wrap">@message.Text</p>
                                </div>
                            </div>
                        }
                        @if (isWaitingForResponse)
                        {
                            <div class="mb-4 text-left">
                                <div class="inline-block p-3 rounded-lg bg-gray-700 animate-pulse">
                                   <p class="text-sm text-gray-400">AI is thinking...</p>
                                </div>
                            </div>
                        }
                    }
                </div>
                <div class="p-4 border-t border-gray-700">
                    <div class="flex items-start space-x-4">
                        <textarea @ref="textAreaRef" 
                                  @bind="currentQuestion"
                                  @bind:event="oninput"
                                  @onkeydown="HandleKeyDown"
                                  @onkeydown:preventDefault="shouldPreventDefault"
                                  rows="1"
                                  placeholder="Ask a question... (Shift+Enter for new line)"
                                  class="flex-1 bg-gray-700 border-gray-600 rounded-lg p-3 resize-none focus:outline-none focus:ring-2 focus:ring-blue-500"
                                  disabled="@(isWaitingForResponse || selectedDocument == null)"></textarea>
    
                        <button @onclick="SendQuestion"
                                class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-5 rounded-lg disabled:bg-gray-500 disabled:cursor-not-allowed flex-shrink-0"
                                disabled="@(isWaitingForResponse || string.IsNullOrWhiteSpace(currentQuestion) || selectedDocument == null)">
                            Send
                        </button>
                    </div>
                </div>
            </main>
        </div>
    </div>
}


@code {
    private HttpClient Http = default!;
    private bool _shouldScrollToBottom = false;
    private bool _isLoadingInitialData = true;
    private string? _initialDataError;
    private ElementReference textAreaRef;
    private List<DocumentDto> documents = new();
    private DocumentDto? selectedDocument;
    private List<ChatMessage> chatHistory = new();
    private List<string> availableModels = new();
    private string selectedModel = "llama3:8b";
    private string currentQuestion = "";
    private string? statusMessage;
    private bool isError;
    private bool isWaitingForResponse;
    private bool shouldPreventDefault = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_shouldScrollToBottom)
        {
            _shouldScrollToBottom = false;
            await JSRuntime.InvokeVoidAsync("scrollToElementBottom", "chat-container");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        Http = HttpClientFactory.CreateClient("Api");
        Http.Timeout = TimeSpan.FromMinutes(5);
        await LoadInitialDataAsync();
    }

    private async Task LoadInitialDataAsync()
    {
        _isLoadingInitialData = true;
        _initialDataError = null;
        StateHasChanged();

        try
        {
            documents = await Http.GetFromJsonAsync<List<DocumentDto>>("api/documents") ?? new();
            availableModels = await Http.GetFromJsonAsync<List<string>>("api/chat/models") ?? new();
            if (availableModels.Any()) { selectedModel = availableModels.First(); }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Failed to load initial data: {ex}");
            _initialDataError = "Could not connect to the server. Please ensure the backend is running and refresh the page.";
        }
        finally
        {
            _isLoadingInitialData = false;
        }
    }


    private void SelectDocument(DocumentDto doc)
    {
        if (selectedDocument?.Id != doc.Id)
        {
            selectedDocument = doc;
            chatHistory.Clear();
            chatHistory.Add(new ChatMessage { Sender = "AI", Text = $"Selected document: '{doc.FileName}'. What would you like to know?", Timestamp = DateTime.Now });
        }
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file == null) return;

        statusMessage = $"Uploading '{file.Name}'...";
        isError = false;

        using var content = new MultipartFormDataContent();
        content.Add(new StreamContent(file.OpenReadStream(file.Size)), "file", file.Name);

        try
        {
            var response = await Http.PostAsync("api/documents/upload", content);
            if (response.IsSuccessStatusCode)
            {
                var newDoc = await response.Content.ReadFromJsonAsync<DocumentDto>();
                if (newDoc != null) {
                    documents.Insert(0, newDoc);
                    SelectDocument(newDoc);
                }
                statusMessage = $"'{file.Name}' ingested successfully.";
            }
            else
            {
                statusMessage = $"Error: {await response.Content.ReadAsStringAsync()}";
                isError = true;
            }
        }
        catch (Exception ex)
        {
            statusMessage = $"Upload failed: {ex.Message}";
            isError = true;
        }
    }

   private async Task SendQuestion()
   {
        if (isWaitingForResponse || string.IsNullOrWhiteSpace(currentQuestion) || selectedDocument == null) return;

        var questionToSend = currentQuestion.Trim();
        if (string.IsNullOrEmpty(questionToSend)) return;

        currentQuestion = "";
        isWaitingForResponse = true;
        chatHistory.Add(new ChatMessage { Sender = "You", Text = questionToSend, Timestamp = DateTime.Now });
        StateHasChanged();

        try
        {
            var request = new ChatRequest(selectedDocument.Id, questionToSend, selectedModel);
            var response = await Http.PostAsJsonAsync("api/chat/ask", request);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<AnswerResponse>();
                chatHistory.Add(new ChatMessage { Sender = "AI", Text = result?.Answer ?? "...", Timestamp = DateTime.Now });
            }
            else
            {
                chatHistory.Add(new ChatMessage { Sender = "Error", Text = $"API Error: {await response.Content.ReadAsStringAsync()}", Timestamp = DateTime.Now });
            }
        }
        catch (Exception ex)
        {
            chatHistory.Add(new ChatMessage { Sender = "Error", Text = $"Exception: {ex.Message}", Timestamp = DateTime.Now });
        }
        finally
        {
            isWaitingForResponse = false;
            _shouldScrollToBottom = true;
            StateHasChanged();
            await textAreaRef.FocusAsync();
        }
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        shouldPreventDefault = false;

        if (e.Key == "Enter" && !e.ShiftKey)
        {
            shouldPreventDefault = true; 
            await SendQuestion();
        }
    }

    private async Task DeleteDocument(DocumentDto docToDelete)
    {
        if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete '{docToDelete.FileName}'?"))
        {
            return;
        }
    
        try
        {
            var response = await Http.DeleteAsync($"api/documents/{docToDelete.Id}");
            if (response.IsSuccessStatusCode)
            {
                statusMessage = $"Deleted '{docToDelete.FileName}'.";
                isError = false;

                if (selectedDocument?.Id == docToDelete.Id)
                {
                    selectedDocument = null;
                    chatHistory.Clear();
                }
                documents.Remove(docToDelete);
            }
            else
            {
                statusMessage = $"Error deleting document: {await response.Content.ReadAsStringAsync()}";
                isError = true;
            }
        }
        catch (Exception ex)
        {
            statusMessage = $"Exception while deleting: {ex.Message}";
            isError = true;
        }
    }

    private record AnswerResponse(string Answer);
    private record ChatRequest(int DocumentId, string Question, string ModelId);
}